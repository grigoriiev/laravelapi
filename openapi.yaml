openapi: 3.0.3
info:
  title: Swagger Notebooks - OpenAPI 3.0
  description: |-
    This is test api

  contact:
    email: grigorjev-andrey2011@yandex.ru
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://swagger.io/api/v3
tags:
  - name: notebook
    description: Everything about your Notebook
    externalDocs:
      description: Find out more
      url: http://swagger.io

paths:
  /notebook/{id}:
    put:
      tags:
        - notebook
      summary: Update an existing notebook
      description: Update an existing notebook by Id
      operationId: updateNotebook
      parameters:
        - name: id
          in: path
          description: ID of notebook to return
          required: true
          schema:
             type: number
             format: int64
      requestBody:
        description: Update an existent notebook in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notebook'
          application/xml:
            schema:
              $ref: '#/components/schemas/Notebook'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Notebook'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notebook'
            application/xml:
              schema:
                $ref: '#/components/schemas/Notebook'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception

    get:
      tags:
        - notebook
      summary: Show notebook
      description: Multiple status values can be provided with comma separated strings
      operationId: findNotebooksByStatus
      parameters:
        - name: id
          in: path
          description: ID of pet to return
          required: true
          schema:
             type: number
             format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notebook'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notebook'
        '400':
          description: Invalid status value


    delete:
      tags:
        - notebook
      summary: Deletes a notebook
      description: delete a notebook
      operationId: deleteNotebook
      parameters:
        - name: id
          in: path
          description: ID of notebook to return
          required: true
          schema:
             type: number
             format: int64
      responses:
        '400':
          description: Invalid notebook value

    post:
      tags:
        - notebook
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: id
          in: path
          description: ID of notebook to return
          required: true
          schema:
             type: number
             format: int64
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'


  /notebook:
    post:
      tags:
        - notebook
      summary: Add a new notebook to the store
      description: Add a new notebook to the store
      operationId: addnNotebook
      requestBody:
        description: Create a new notebook in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notebook'
          application/xml:
            schema:
              $ref: '#/components/schemas/Notebook'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Notebook'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notebook'
            application/xml:
              schema:
                $ref: '#/components/schemas/Notebook'
        '405':
          description: Invalid input

    get:
      tags:
        - notebook
      summary: All notebooks
      description: All notebooks
      operationId: All notebooks

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notebook'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notebook'
        '400':
          description: Invalid tag value

  /notebooklist/{limit}:
    get:
      tags:
        - notebook
      summary: Page notebooks
      description: Returns pages
      operationId: getPages
      parameters:
        - name: limit
          in: path
          description: ID of pet to return
          required: true
          schema:
             type: object
             format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notebook'
            application/xml:
              schema:
                $ref: '#/components/schemas/Notebook'
        '400':
          description: Invalid ID supplied
        '404':
          description: Notebook not found

components:
  schemas:
    Notebook:
      required:
        - fio
        - tel
        - email
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        fio:
          type: string
          example: doggie
        tel:
          type: string
          example: +79095552233
        email:
          type: string
          example: roliol27@yandex.ru
        date:
          type: string
          example: 8 января 1977
        foto:
          type: string
          example: /storage/img/jol.png
      xml:
        name: Notebook
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Notebook object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Notebook'
        application/xml:
          schema:
            $ref: '#/components/schemas/Notebook'

